float r8_max ( float x, float y ) {
  float value;

  if ( y < x )
  {
    value = x;
  }
  else
  {
    value = y;
  }
  return value;
}

float r8mat_norm_li ( int m, int n, float a[4*4]) {
  int i;
  int j;
  float row_sum;
  float value;

  value = 0.0;

  for ( i = 0; i < m; i++ )
  {
    row_sum = 0.0;
    for ( j = 0; j < n; j++ )
    {
      row_sum = row_sum + abs ( a[i+j*m] );
    }
    value = r8_max ( value, row_sum );
  }
  return value;
}

float r8_big ( ) {
  float value;

  value = 1.0E+30;

  return value;
}

float r8_log_2 ( float x ) {
  float value;

  if ( x == 0.0 )
  {
    value = - r8_big ( );
  }
  else
  {
    value = log ( abs ( x ) ) / log ( 2.0 );
  }

  return value;
}

int i4_max ( int i1, int i2 ) {
  int value;

  if ( i2 < i1 )
  {
    value = i1;
  }
  else
  {
    value = i2;
  }
  return value;
}

void r8mat_scale ( int m, int n, float s, inout float a[4*4] ) {
  int i;
  int j;

  for ( j = 0; j < n; j++ )
  {
    for ( i = 0; i < m; i++ )
    {
      a[i+j*m] = a[i+j*m] * s;
    }
  }
  return;
}

float[4*4] r8mat_identity_new ( int n ){
  int i;
  int j;
  int k;

  float[4*4] a;

  k = 0;
  for ( j = 0; j < n; j++ )
  {
    for ( i = 0; i < n; i++ )
    {
      if ( i == j )
      {
        a[k] = 1.0;
      }
      else
      {
        a[k] = 0.0;
      }
      k = k + 1;
    }
  }

  return a;
}

void r8mat_add ( int m, int n, float alpha, float a[4*4], float beta, 
  float b[4*4], inout float c[4*4] ) {
  int i;
  int j;

  for ( j = 0; j < n; j++ )
  {
    for ( i = 0; i < m; i++ )
    {
      c[i+j*m] = alpha * a[i+j*m] + beta * b[i+j*m];
    }
  }
  return;
}

void r8mat_mm ( int n1, int n2, int n3, float a[4*4], float b[4*4], inout float c[4*4] ) {
  int i;
  int j;
  int k;

  float c1[4*4];

  for ( i = 0; i < n1; i++ )
  {
    for ( j = 0; j < n3; j++ )
    {
      c1[i+j*n1] = 0.0;
      for ( k = 0; k < n2; k++ )
      {
        c1[i+j*n1] = c1[i+j*n1] + a[i+k*n1] * b[k+j*n2];
      }
    }
  }

  c = c1;//r8mat_copy ( n1, n3, c1, c );

  return;
}

float [4*4] r8mat_fss_new ( int n, float a[4*4], int nb, float b[4*4] ) {
  int i;
  int ipiv;
  int j;
  int jcol;
  float piv;
  float t;

  float x[4*4];

  for ( j = 0; j < nb; j++ )
  {
    for ( i = 0; i < n; i++ )
    {
      x[i+j*n] = b[i+j*n];
    }
  }
  for ( jcol = 1; jcol <= n; jcol++ )
  {
//
//  Find the maximum element in column I.
//
    piv = abs ( a[jcol-1+(jcol-1)*n] );
    ipiv = jcol;
    for ( i = jcol + 1; i <= n; i++ )
    {
      if ( piv < abs ( a[i-1+(jcol-1)*n] ) )
      {
        piv = abs ( a[i-1+(jcol-1)*n] );
        ipiv = i;
      }
    }

    if ( piv == 0.0 )
    {
    //TODO: error 
    //   cerr << "R8MAT_FSS_NEW - Fatal error!\n";
    //   cerr << "  Zero pivot on step " << jcol << "\n";
    }
//
//  Switch rows JCOL and IPIV, and X.
//
    if ( jcol != ipiv )
    {
      for ( j = 1; j <= n; j++ )
      {
        t                 = a[jcol-1+(j-1)*n];
        a[jcol-1+(j-1)*n] = a[ipiv-1+(j-1)*n];
        a[ipiv-1+(j-1)*n] = t;
      }
      for ( j = 0; j < nb; j++ )
      {
        t            = x[jcol-1+j*n];
        x[jcol-1+j*n] = x[ipiv-1+j*n];
        x[ipiv-1+j*n] = t;
      }
    }
//
//  Scale the pivot row.
//
    t = a[jcol-1+(jcol-1)*n];
    a[jcol-1+(jcol-1)*n] = 1.0;
    for ( j = jcol+1; j <= n; j++ )
    {
      a[jcol-1+(j-1)*n] = a[jcol-1+(j-1)*n] / t;
    }
    for ( j = 0; j < nb; j++ )
    {
      x[jcol-1+j*n] = x[jcol-1+j*n] / t;
    }
//
//  Use the pivot row to eliminate lower entries in that column.
//
    for ( i = jcol+1; i <= n; i++ )
    {
      if ( a[i-1+(jcol-1)*n] != 0.0 )
      {
        t = - a[i-1+(jcol-1)*n];
        a[i-1+(jcol-1)*n] = 0.0;
        for ( j = jcol+1; j <= n; j++ )
        {
          a[i-1+(j-1)*n] = a[i-1+(j-1)*n] + t * a[jcol-1+(j-1)*n];
        }
        for ( j = 0; j < nb; j++ )
        {
          x[i-1+j*n] = x[i-1+j*n] + t * x[jcol-1+j*n];
        }
      }
    }
  }
//
//  Back solve.
//
  for ( jcol = n; 2 <= jcol; jcol-- )
  {
    for ( i = 1; i < jcol; i++ )
    {
      for ( j = 0; j < nb; j++ )
      {
        x[i-1+j*n] = x[i-1+j*n] - a[i-1+(jcol-1)*n] * x[jcol-1+j*n];
      }
    }
  }

  return x;
}

void r8mat_minvm ( int n1, int n2, float a[4*4], float b[4*4], inout float c[4*4] ) {

  float alu[4*4] = a; //r8mat_copy_new ( n1, n1, a );

  float d[4*4] = r8mat_fss_new ( n1, alu, n2, b );

  c = d;//r8mat_copy ( n1, n2, d, c );

  return;
}

float[4*4] r8mat_expm1(in int n, in float a[4*4]) {
    // a[0] = n;//a[0];    
    const float one = 1.0;
    const int q = 6;

    float a2[4*4] = a; //a2 = r8mat_copy_new ( n, n, a );
    float a_norm = r8mat_norm_li ( n, n, a2 );
    int ee = int( ( r8_log_2 ( a_norm ) ) ) + 1;
    int s = i4_max ( 0, ee + 1 );
    float t = 1.0 / pow ( 2.0, float(s) );
    r8mat_scale ( n, n, t, a2 );
    float x[4*4] = a2;//x = r8mat_copy_new ( n, n, a2 );
    float c = 0.5;
    float e[4*4] = r8mat_identity_new ( n );
    r8mat_add ( n, n, one, e, c, a2, e );
    float d[4*4] = r8mat_identity_new ( n );
    r8mat_add ( n, n, one, d, -c, a2, d );
    bool p = true;
    for (int k = 2; k <= q; k++ )
    {
        c = c * float( ( q - k + 1 ) ) / float( ( k * ( 2 * q - k + 1 ) ) );

        r8mat_mm ( n, n, n, a2, x, x );

        r8mat_add ( n, n, c, x, one, e, e );

        if ( p )
        {
        r8mat_add ( n, n, c, x, one, d, d );
        }
        else
        {
        r8mat_add ( n, n, -c, x, one, d, d );
        }

        p = !p;
    }
    r8mat_minvm ( n, n, d, e, e );
    for (int k = 1; k <= s; k++ )
    {
        r8mat_mm ( n, n, n, e, e, e );
    }

    return e;

    // float b[4*4] = {.5,.5,.5,.5,
    // .5,.5,.5,.5,
    // .5,.5,.5,.5,
    // .5,.5,.5,.1};
    // return b;
}

void gauss(float mat[4*5], inout float x[4]){
    const int n = 4;
    int i,j,k;

    
for(i=0;i<n;i++) 
    {                   
        for(j=i+1;j<n;j++)
        {
            if(abs(mat[i*(n+1)+i]) < abs(mat[j*(n+1)+i]))
            {
                for(k=0;k<n+1;k++)
                {
                    /* swapping mat[i*(n+1)+k] and mat[j*(n+1)+k] */
        mat[i*(n+1)+k]=mat[i*(n+1)+k]+mat[j*(n+1)+k];
                    mat[j*(n+1)+k]=mat[i*(n+1)+k]-mat[j*(n+1)+k];
                    mat[i*(n+1)+k]=mat[i*(n+1)+k]-mat[j*(n+1)+k];
                }
            }
      }
    }
   
     /* performing Gaussian elimination */
    for(i=0;i<n-1;i++)
    {
        for(j=i+1;j<n;j++)
        {
            float f=mat[j*(n+1)+i]/mat[i*(n+1)+i];
            for(k=0;k<n+1;k++)
            {
              mat[j*(n+1)+k]=mat[j*(n+1)+k]-f*mat[i*(n+1)+k];
      }
        }
    }
    /* Backward substitution for discovering values of unknowns */
    for(i=n-1;i>=0;i--)          
    {                     
        x[i]=mat[i*(n+1)+n];
                    
        for(j=i+1;j<n;j++)
        {
          if(i!=j)
          {
              x[i]=x[i]-mat[i*(n+1)+j]*x[j];
    }          
  }
  x[i]=x[i]/mat[i*(n+1)+i];  
    }
}

float mc4sm_ss(float Vj, float par[2*7], inout float p_steady_state[4]) {
    // returns gj, *p_steady_state
    // % Vj gating parameters
    float lamda1 = par[0*7+0];// lamda1 = par(1,1);  % opening and closing intensity rates when V=V0, in s^-1
    float A_alfa1 = par[0*7+1];// A_alfa1 = par(1,2); % closing rate sensitivities to voltage, in mV^-1
    float A_beta1 = par[0*7+2];// A_beta1 = par(1,3); % opening rate sensitivities to voltage, in mV^-1
    float V_01 = par[0*7+3];// V_01 = par(1,4);    % voltages, when  opening rate equals closing rate, in mV
    float P_g1 = par[0*7+4];// P_g1 = par(1,5);
    float G_o1 = par[0*7+5];// G_o1 = par(1,6);  % maximum open state conductances, in nS
    float G_c1 = par[0*7+6];// G_c1 = par(1,7);  % minimum closed state conductances, in nS

    float lamda2 = par[1*7+0];// lamda1 = par(1,1);  % opening and closing intensity rates when V=V0, in s^-1
    float A_alfa2 = par[1*7+1];// A_alfa1 = par(1,2); % closing rate sensitivities to voltage, in mV^-1
    float A_beta2 = par[1*7+2];// A_beta1 = par(1,3); % opening rate sensitivities to voltage, in mV^-1
    float V_02 = par[1*7+3];// V_01 = par(1,4);    % voltages, when  opening rate equals closing rate, in mV
    float P_g2 = par[1*7+4];// P_g1 = par(1,5);
    float G_o2 = par[1*7+5];// G_o1 = par(1,6);  % maximum open state conductances, in nS
    float G_c2 = par[1*7+6];// G_c1 = par(1,7);  % minimum closed state conductances, in nS
    
    // int a[2][2] = int[][](int[](1,1),int[](1,1));
    float V[4][2] = float[][](
        float[](Vj*G_o2/(G_o1+G_o2),  -Vj*G_o1/(G_o1+G_o2)),
        float[](Vj*G_c2/(G_o1+G_c2),  -Vj*G_o1/(G_o1+G_c2)),
        float[](Vj*G_o2/(G_c1+G_o2),  -Vj*G_c1/(G_c1+G_o2)),
        float[](Vj*G_c2/(G_c1+G_c2),  -Vj*G_c1/(G_c1+G_c2)) 
        );

    float Q[4*4] = float[](
         -lamda2*exp(A_beta2*P_g2*(V[0][1]-V_02))-lamda1*exp(A_beta1*P_g1*(V[0][0]-V_01)), lamda2*exp(A_beta2*P_g2*(V[0][1]-V_02)), lamda1*exp(A_beta1*P_g1*(V[0][0]-V_01)), 0.,
        lamda2*exp(-A_alfa2*P_g2*(V[1][1]-V_02)), -lamda2*exp(-A_alfa2*P_g2*(V[1][1]-V_02))-lamda1*exp(A_beta1*P_g1*(V[1][0]-V_01)), 0.,  lamda1*exp(A_beta1*P_g1*(V[1][0]-V_01)),  
        lamda1*exp(-A_alfa1*P_g1*(V[2][0]-V_01)), 0., -lamda1*exp(-A_alfa1*P_g1*(V[2][0]-V_01))-lamda2*exp(A_beta2*P_g2*(V[2][1]-V_02)), lamda2*exp(A_beta2*P_g2*(V[2][1]-V_02)),
        0., lamda1*exp(-A_alfa1*P_g1*(V[3][0]-V_01)), lamda2*exp(-A_alfa2*P_g2*(V[3][1]-V_02)),   -lamda1*exp(-A_alfa1*P_g1*(V[3][0]-V_01))-lamda2*exp(-A_alfa2*P_g2*(V[3][1]-V_02))
    );

    float ggg[4]= float[](G_o1*G_o2/(G_o1+G_o2), G_o1*G_c2/(G_o1+G_c2), G_c1*G_o2/(G_c1+G_o2), G_c1*G_c2/(G_c1+G_c2));
    
    float x[4] = float[](0.,0.,0.,0.);
    float Q_[4*5];
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 5; j++) {
            if (i == 0)
                Q_[i*5+j] = 1.;
            else
            if (j == 4)
                Q_[i*5+j] = 0.;//b[i];// equivalent (i == 1) ? 1 : 0;
            else
                Q_[i*5+j] = Q[j*4+i];
        }

    gauss(Q_,x);

    for (int i = 0; i < 4; i++)
        p_steady_state[i] = x[i];

    float gj = 0.; // gj=p*ggg';
    for (int i = 0; i < 4; i++)
        gj += p_steady_state[i]*ggg[i];

    return gj;
}

float mc4sm(float Vj, float dt, float par[2*7], inout float p[4]) { // function [gj, p_next] = MC4SM(Vj, dt, par, p)
    // % Vj gating parameters
    float lamda1 = par[0*7+0];// lamda1 = par(1,1);  % opening and closing intensity rates when V=V0, in s^-1
    float A_alfa1 = par[0*7+1];// A_alfa1 = par(1,2); % closing rate sensitivities to voltage, in mV^-1
    float A_beta1 = par[0*7+2];// A_beta1 = par(1,3); % opening rate sensitivities to voltage, in mV^-1
    float V_01 = par[0*7+3];// V_01 = par(1,4);    % voltages, when  opening rate equals closing rate, in mV
    float P_g1 = par[0*7+4];// P_g1 = par(1,5);
    float G_o1 = par[0*7+5];// G_o1 = par(1,6);  % maximum open state conductances, in nS
    float G_c1 = par[0*7+6];// G_c1 = par(1,7);  % minimum closed state conductances, in nS

    float lamda2 = par[1*7+0];// lamda1 = par(1,1);  % opening and closing intensity rates when V=V0, in s^-1
    float A_alfa2 = par[1*7+1];// A_alfa1 = par(1,2); % closing rate sensitivities to voltage, in mV^-1
    float A_beta2 = par[1*7+2];// A_beta1 = par(1,3); % opening rate sensitivities to voltage, in mV^-1
    float V_02 = par[1*7+3];// V_01 = par(1,4);    % voltages, when  opening rate equals closing rate, in mV
    float P_g2 = par[1*7+4];// P_g1 = par(1,5);
    float G_o2 = par[1*7+5];// G_o1 = par(1,6);  % maximum open state conductances, in nS
    float G_c2 = par[1*7+6];// G_c1 = par(1,7);  % minimum closed state conductances, in nS
    
    float V[4][2] = float[][](
        float[](Vj*G_o2/(G_o1+G_o2),  -Vj*G_o1/(G_o1+G_o2)),
        float[](Vj*G_c2/(G_o1+G_c2),  -Vj*G_o1/(G_o1+G_c2)),
        float[](Vj*G_o2/(G_c1+G_o2),  -Vj*G_c1/(G_c1+G_o2)),
        float[](Vj*G_c2/(G_c1+G_c2),  -Vj*G_c1/(G_c1+G_c2)) 
        );

    float Q[4*4] = float[](
         -lamda2*exp(A_beta2*P_g2*(V[0][1]-V_02))-lamda1*exp(A_beta1*P_g1*(V[0][0]-V_01)), lamda2*exp(A_beta2*P_g2*(V[0][1]-V_02)), lamda1*exp(A_beta1*P_g1*(V[0][0]-V_01)), 0.,
        lamda2*exp(-A_alfa2*P_g2*(V[1][1]-V_02)), -lamda2*exp(-A_alfa2*P_g2*(V[1][1]-V_02))-lamda1*exp(A_beta1*P_g1*(V[1][0]-V_01)), 0.,  lamda1*exp(A_beta1*P_g1*(V[1][0]-V_01)),  
        lamda1*exp(-A_alfa1*P_g1*(V[2][0]-V_01)), 0., -lamda1*exp(-A_alfa1*P_g1*(V[2][0]-V_01))-lamda2*exp(A_beta2*P_g2*(V[2][1]-V_02)), lamda2*exp(A_beta2*P_g2*(V[2][1]-V_02)),
        0., lamda1*exp(-A_alfa1*P_g1*(V[3][0]-V_01)), lamda2*exp(-A_alfa2*P_g2*(V[3][1]-V_02)),   -lamda1*exp(-A_alfa1*P_g1*(V[3][0]-V_01))-lamda2*exp(-A_alfa2*P_g2*(V[3][1]-V_02))
    );

    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            Q[i*4+j] *= dt;     // P=expm(Q*dt);

    float P[4*4];
    P = r8mat_expm1(4,Q);

    float p_next[4]; for (int k = 0; k < 4; k++)  p_next[k] = 0.;
    for (int k = 0; k < 4; k++)
        for (int j = 0; j < 4; j++)
            p_next[k] += p[j]*P[j*4+k]; //p_next = p*P;

    float ggg[4]= float[4](G_o1*G_o2/(G_o1+G_o2), G_o1*G_c2/(G_o1+G_c2), G_c1*G_o2/(G_c1+G_o2), G_c1*G_c2/(G_c1+G_c2));

    float gj = 0.;
    for (int i = 0; i < 4; i++)
            gj += p[i]*ggg[i];     // gj=p*ggg';

    for(int i=0; i<4; i++)
        p[i] = p_next[i];
    
    return gj;
}